{"version":3,"sources":["components/stopwatch/Stopwatch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Stopwatch","offsetTimestamp","useStopwatch","autoStart","seconds","minutes","hours","days","isRunning","start","pause","className","App","startTime","Date","difference","getTime","setSeconds","getSeconds","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAuBeA,MAnBf,YAAyC,IAApBC,EAAmB,EAAnBA,gBACjB,EAQMC,uBAAa,CAAEC,WAAW,EAAOF,oBAPnCG,EADJ,EACIA,QACAC,EAFJ,EAEIA,QACAC,EAHJ,EAGIA,MACAC,EAJJ,EAIIA,KAOF,OAXF,EAKIC,UALJ,EAMIC,MANJ,EAOIC,MAKA,sBAAKC,UAAU,kBAAf,UACIJ,EADJ,MACaD,EADb,MACuBD,EADvB,MACmCD,MCA5BQ,MAbf,WACE,IAAMC,EAAY,IAAIC,KAAK,KAAM,EAAG,GAAI,GAAI,GAAI,GAE1CC,GADM,IAAID,MACQE,UAAYH,EAAUG,UACxCf,EAAkB,IAAIa,KAE5B,OADAb,EAAgBgB,WAAWhB,EAAgBiB,aAAeH,EAAW,KAEnE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,CAAWV,gBAAiBA,OCCnBkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bc5cb342.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Stopwatch.css';\r\nimport { useStopwatch } from 'react-timer-hook';\r\n\r\nfunction Stopwatch({ offsetTimestamp }) {\r\n    const {\r\n        seconds,\r\n        minutes,\r\n        hours,\r\n        days,\r\n        isRunning,\r\n        start,\r\n        pause,\r\n      } = useStopwatch({ autoStart: true , offsetTimestamp});\r\n    \r\n    \r\n      return (\r\n        <div className=\"watch-container\">\r\n           {days} : {hours} : {minutes} : {seconds}\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Stopwatch;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Stopwatch from './components/stopwatch/Stopwatch';\n\nfunction App() {\n  const startTime = new Date(2021, 4, 28, 20, 30, 0);\n  const now = new Date();\n  const difference =  now.getTime() - startTime.getTime();\n  const offsetTimestamp = new Date();\n  offsetTimestamp.setSeconds(offsetTimestamp.getSeconds() + difference/1000);\n  return (\n    <div className=\"App\">\n      <Stopwatch offsetTimestamp={offsetTimestamp}></Stopwatch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}